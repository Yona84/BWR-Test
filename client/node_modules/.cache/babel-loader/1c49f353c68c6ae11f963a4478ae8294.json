{"ast":null,"code":"var _jsxFileName = \"/Users/yonatanronen/dev/10k-Map-Markers/server/client/src/components/MapContainer.jsx\";\nimport React, { useState, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { GOOGLE_API_KEY } from '../utils/utils';\nimport useSupercluster from 'use-supercluster';\nimport { useGetUpdatedData } from '../hooks/hooks';\nimport VehicleComponent from './VehicleComponent';\nimport PropTypes from 'prop-types';\nimport { css } from 'emotion';\nconst propTypes = {\n  data: PropTypes.array,\n  lat: PropTypes.number,\n  lng: PropTypes.number,\n  setData: PropTypes.func\n};\n\nconst Marker = ({\n  children\n}) => children;\n\nconst MapContainer = ({\n  data,\n  lat,\n  lng,\n  setData\n}) => {\n  const mapRef = useRef();\n  const [bounds, setBounds] = useState(null);\n  const [zoom, setZoom] = useState(10);\n  const updatedData = useGetUpdatedData();\n  const dataIsValid = updatedData && updatedData.length > 0;\n  React.useEffect(() => {\n    if (dataIsValid) {\n      setData(updatedData);\n    }\n  });\n  console.log('data', data);\n  const points = data.map(vehicle => ({\n    type: vehicle.type,\n    id: vehicle.id,\n    status: vehicle.status,\n    properties: {\n      cluster: false,\n      carId: vehicle.status\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [parseFloat(vehicle.location.lng), parseFloat(vehicle.location.lat)]\n    }\n  }));\n  const {\n    clusters,\n    supercluster\n  } = useSupercluster({\n    points,\n    bounds,\n    zoom,\n    options: {\n      radius: 75,\n      maxZoom: 20\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: GOOGLE_API_KEY\n    },\n    defaultCenter: {\n      lat: lat,\n      lng: lng\n    },\n    defaultZoom: 14,\n    yesIWantToUseGoogleMapApiInternals: true,\n    onGoogleApiLoaded: ({\n      map\n    }) => {\n      mapRef.current = map;\n    },\n    onChange: ({\n      zoom,\n      bounds\n    }) => {\n      setZoom(zoom);\n      setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, clusters.map(cluster => {\n    console.log('cluster', cluster);\n    const [longitude, latitude] = cluster.geometry.coordinates;\n    const {\n      cluster: isCluster,\n      point_count: pointCount\n    } = cluster.properties;\n\n    if (isCluster) {\n      return /*#__PURE__*/React.createElement(Marker, {\n        key: `cluster-${cluster.id}`,\n        lat: latitude,\n        lng: longitude,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: styles.cluster({\n          pointCount,\n          points\n        }),\n        onClick: () => {\n          const expansionZoom = Math.min(supercluster.getClusterExpansionZoom(cluster.id), 20);\n          mapRef.current.setZoom(expansionZoom);\n          mapRef.current.panTo({\n            lat: latitude,\n            lng: longitude\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 19\n        }\n      }, pointCount));\n    }\n\n    return /*#__PURE__*/React.createElement(VehicleComponent, {\n      lat: latitude,\n      text: cluster.id,\n      lng: longitude,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    });\n  })));\n};\n\nconst styles = {\n  cluster: ({\n    pointCount,\n    points\n  }) => css({\n    width: `${10 + pointCount / points.length * 20}px`,\n    height: `${10 + pointCount / points.length * 20}px`,\n    backgroundColor: '#1d1d1d',\n    color: 'white',\n    padding: 5,\n    borderRadius: '50%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontSize: 8\n  })\n};\nMapContainer.propTypes = propTypes;\nexport default MapContainer;","map":{"version":3,"sources":["/Users/yonatanronen/dev/10k-Map-Markers/server/client/src/components/MapContainer.jsx"],"names":["React","useState","useRef","GoogleMapReact","GOOGLE_API_KEY","useSupercluster","useGetUpdatedData","VehicleComponent","PropTypes","css","propTypes","data","array","lat","number","lng","setData","func","Marker","children","MapContainer","mapRef","bounds","setBounds","zoom","setZoom","updatedData","dataIsValid","length","useEffect","console","log","points","map","vehicle","type","id","status","properties","cluster","carId","geometry","coordinates","parseFloat","location","clusters","supercluster","options","radius","maxZoom","height","width","key","current","nw","se","longitude","latitude","isCluster","point_count","pointCount","styles","expansionZoom","Math","min","getClusterExpansionZoom","panTo","backgroundColor","color","padding","borderRadius","display","justifyContent","alignItems","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { GOOGLE_API_KEY } from '../utils/utils';\nimport useSupercluster from 'use-supercluster';\nimport { useGetUpdatedData } from '../hooks/hooks';\nimport VehicleComponent from './VehicleComponent';\nimport PropTypes from 'prop-types';\nimport { css } from 'emotion';\n\nconst propTypes = {\n  data: PropTypes.array,\n  lat: PropTypes.number,\n  lng: PropTypes.number,\n  setData: PropTypes.func,\n};\n\nconst Marker = ({ children }) => children;\n\nconst MapContainer = ({ data, lat, lng, setData }) => {\n\n  const mapRef = useRef();\n  const [ bounds, setBounds ] = useState(null);\n  const [ zoom, setZoom ] = useState(10);\n\n  const updatedData = useGetUpdatedData();\n  const dataIsValid = updatedData && updatedData.length > 0;\n\n  React.useEffect(() => {\n    if (dataIsValid) {\n      setData(updatedData);\n    }\n  });\n  console.log('data', data)\n  const points = data.map(vehicle => ({\n    type: vehicle.type,\n    id: vehicle.id,\n    status: vehicle.status,\n    properties: { cluster: false, carId: vehicle.status },\n    geometry: {\n      type: 'Point',\n      coordinates: [\n        parseFloat(vehicle.location.lng),\n        parseFloat(vehicle.location.lat)\n      ]\n    }\n  }));\n\n  const { clusters, supercluster } = useSupercluster({\n    points,\n    bounds,\n    zoom,\n    options: { radius: 75, maxZoom: 20 }\n  });\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: GOOGLE_API_KEY }}\n        defaultCenter={{ lat: lat, lng: lng }}\n        defaultZoom={14}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={({ map }) => {\n          mapRef.current = map;\n        }}\n        onChange={({ zoom, bounds }) => {\n          setZoom(zoom);\n          setBounds([\n            bounds.nw.lng,\n            bounds.se.lat,\n            bounds.se.lng,\n            bounds.nw.lat\n          ]);\n        }}>\n        {\n          clusters.map(cluster => {\n            console.log('cluster', cluster)\n            const [ longitude, latitude ] = cluster.geometry.coordinates;\n            const {\n              cluster: isCluster,\n              point_count: pointCount\n            } = cluster.properties;\n\n            if (isCluster) {\n              return (\n                <Marker\n                  key={`cluster-${cluster.id}`}\n                  lat={latitude}\n                  lng={longitude}\n                >\n                  <div\n                    className={styles.cluster({ pointCount, points })}\n                    onClick={() => {\n                      const expansionZoom = Math.min(\n                        supercluster.getClusterExpansionZoom(cluster.id),\n                        20\n                      );\n                      mapRef.current.setZoom(expansionZoom);\n                      mapRef.current.panTo({ lat: latitude, lng: longitude });\n                    }}\n                  >\n                    {pointCount}\n                  </div>\n                </Marker>\n              );\n            }\n\n            return (\n              <VehicleComponent\n                lat={latitude}\n                text={cluster.id}\n                lng={longitude}/>\n            );\n          })}\n      </GoogleMapReact>\n    </div>\n  );\n};\n\nconst styles = {\n  cluster: ({ pointCount, points }) => css({\n    width: `${10 + ( pointCount / points.length ) * 20}px`,\n    height: `${10 + ( pointCount / points.length ) * 20}px`,\n    backgroundColor: '#1d1d1d',\n    color: 'white',\n    padding: 5,\n    borderRadius: '50%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontSize: 8\n  })\n};\n\nMapContainer.propTypes = propTypes;\n\nexport default MapContainer;\n"]},"metadata":{},"sourceType":"module"}